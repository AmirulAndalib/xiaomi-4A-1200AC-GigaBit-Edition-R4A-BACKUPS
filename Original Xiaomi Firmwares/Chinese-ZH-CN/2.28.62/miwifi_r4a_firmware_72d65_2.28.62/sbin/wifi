#!/bin/sh
# Copyright (C) 2006 OpenWrt.org

. /lib/functions.sh

usage() {
	cat <<EOF
Usage: $0 [down|detect]
enables (default), disables or detects a wifi configuration.
EOF
	exit 1
}

log() {
	logger -s -t "/sbin/wifi" -- "$@"
}

log_p() {
	logger -p 1 -s -t "/sbin/wifi" -- "$@"
}

log_p "CALLER: `cat /proc/$PPID/cmdline`"

find_net_config() {(
	local vif="$1"
	local cfg
	local ifname

	config_get cfg "$vif" network

	[ -z "$cfg" ] && {
		include /lib/network
		scan_interfaces

		config_get ifname "$vif" ifname

		cfg="$(find_config "$ifname")"
	}
	[ -z "$cfg" ] && return 0
	echo "$cfg"
)}


bridge_interface() {(
	local cfg="$1"
	[ -z "$cfg" ] && return 0

	include /lib/network
	scan_interfaces

	for cfg in $cfg; do
		config_get iftype "$cfg" type
		[ "$iftype" = bridge ] && config_get "$cfg" ifname
		prepare_interface_bridge "$cfg"
		return $?
	done
)}

prepare_key_wep() {
	local key="$1"
	local hex=1

	echo -n "$key" | grep -qE "[^a-fA-F0-9]" && hex=0
	[ "${#key}" -eq 10 -a $hex -eq 1 ] || \
	[ "${#key}" -eq 26 -a $hex -eq 1 ] || {
		[ "${key:0:2}" = "s:" ] && key="${key#s:}"
        	key="$(echo -n "$key" | hexdump -ve '1/1 "%02x" ""')"
	}
	echo "$key"
}

wifi_fixup_hwmode() {
	local device="$1"
	local default="$2"
	local hwmode hwmode_11n

	config_get channel "$device" channel
	config_get hwmode "$device" hwmode
	case "$hwmode" in
		11bg) hwmode=bg;;
		11a) hwmode=a;;
		11b) hwmode=b;;
		11g) hwmode=g;;
		11n*)
			hwmode_11n="${hwmode##11n}"
			case "$hwmode_11n" in
				a|g) ;;
				default) hwmode_11n="$default"
			esac
			config_set "$device" hwmode_11n "$hwmode_11n"
		;;
		*)
			hwmode=
			if [ "${channel:-0}" -gt 0 ]; then 
				if [ "${channel:-0}" -gt 14 ]; then
					hwmode=a
				else
					hwmode=g
				fi
			else
				hwmode="$default"
			fi
		;;
	esac
	config_set "$device" hwmode "$hwmode"
}

wifi_sync_para() { return 0;}
wifi_service_start() { return 0;}
wifi_service_stop() { return 0;}
wifi_service_restart() { return 0;}

# check radio status and create wl netdev when wl1 down for MTK SDK.
recall_wifi=0
wifi_wl_create() {
    local date_tag=$(date +%F" "%H:%M:%S)
    local device="$1"

    # check radio status, for old version update
    local radio_disabled="$(uci get wireless.$device.disabled)"
    local guest_dev="$(uci get wireless.guest_2G.device 2>/dev/NULL)"
    log "check_wifidev...$device"
    log "guest_dev...$guest_dev"
    log "radio_disabled...$radio_disabled"

    # check radio status, just guest config is ok.
    if [ "$guest_dev" != "" ] &&  [ "$radio_disabled" == "1" ] && [ "$guest_dev" == "$device" ]; then
        uci set wireless.$device.disabled=0
        uci commit
        recall_wifi=1
        log "...force $device enable."
        logger -p info -t wifishare "stat_points_none wifishare_force=set $device enable, date: $date_tag"
    fi

    # check 2.4G wl netdev status, must up wl1 when startup. MTK SDK
    local wl_name_2g="$(uci get misc.wireless.ifname_2G 2>/dev/NULL)"
    local iface_0_name="$(uci get wireless.@wifi-iface[0].ifname 2>/dev/NULL)"
    local iface_1_name="$(uci get wireless.@wifi-iface[1].ifname 2>/dev/NULL)"
    local wl_disabled="0"

    if [ "$wl_name_2g" == "$iface_0_name" ]
    then
        #  --- R4
        wl_disabled="$(uci get wireless.@wifi-iface[0].disabled 2>/dev/NULL)"
        log "iface[0].disabled...$wl_disabled"
    elif [ "$wl_name_2g" == "$iface_1_name" ]
    then
        #  --- R1CM
        wl_disabled="$(uci get wireless.@wifi-iface[1].disabled 2>/dev/NULL)"
        log "iface[1].disabled...$wl_disabled"
    fi

    # check if guest netdev is ok
    local guest_disabled="$(uci get wireless.guest_2G.disabled 2>/dev/NULL)"
    local guest_name="$(uci get wireless.guest_2G.ifname 2>/dev/NULL)"
    local guest_ok="$(ifconfig $guest_name |grep Ethernet  2>/dev/NULL)"
    local hw_type="$(uci get misc.hardware.model 2>/dev/NULL)"

    log "guest_ok...$guest_ok"
    # if wl netdev not exist, make wl1 up, create wl2\wl3, then shutdown.
    if [ "$guest_name" != "" ] && [ "$guest_dev" == "$device" ] && [ "$guest_ok" == "" ] && [ "$guest_disabled" == "0" ] && [ "$wl_disabled" == "1" ]; then
        ifconfig $wl_name_2g up
        sleep 1
        ifconfig $wl_name_2g down
        # fix bug XP-19157, R3P wl3 has not MAC when netdev register
        if [ "$hw_type" == "R3P" ]; then
            ifconfig $guest_name up
            ifconfig $guest_name down
        fi
        #ifconfig $guest_name up
        brctl addif br-guest $guest_name
        recall_wifi=1
        log "...force $wl_name_2g up, for wl2 wl3 create."
        logger -p info -t wifishare "stat_points_none wifishare_force=$wl_name_2g up, for wl2 wl3 create, date: $date_tag"
    fi
}

wifi_updown() {
	local ft_mode=`cat /proc/xiaoqiang/ft_mode`

	[ enable = "$1" ] && {
		wifi_updown disable "$2" >/dev/null 2>&1
		scan_wifi
		wifi_sync_para
	}

	for device in ${2:-$DEVICES}; do
	    (
		    config_get disabled "$device" disabled
		    [ 1 == "$disabled" ] && {
			    log "'$device' is disabled"
			    set disable
		    }

		    config_get iftype "$device" type
		    log "...$device.type=$iftype..."
		    log "run1 eval type ${1}_$iftype"
		    if eval "type ${1}_$iftype" 2>/dev/null >/dev/null; then
			    eval "scan_$iftype '$device'"
			    log "run2 eval ${1}_$iftype '$device'"
			    eval "${1}_$iftype '$device'" || log "$device($iftype): ${1} failed"
		    else
			    log "$device($iftype): Interface type not supported"
		    fi
	    );

	    # add radio and netdev check in non-factory mode
	    if [ "enable" == "$1" -a "1" != "$ft_mode" ]; then
		    wifi_wl_create $device
	    fi
	    # add end
	done

	if [ "enable" = "$1" ]; then
		wifi_service_start
	else
		wifi_service_stop
	fi
}

wifi_detect() {
	for driver in ${2:-$DRIVERS}; do (
		if eval "type detect_$driver" 2>/dev/null >/dev/null; then
			eval "detect_$driver" || log "$driver: Detect failed"
		else
			log "$driver: Hardware detection not supported"
		fi
	); done
}

start_net() {(
	local iface="$1"
	local config="$2"
	local vifmac="$3"

	[ -f "/var/run/$iface.pid" ] && kill "$(cat /var/run/${iface}.pid)" 2>/dev/null
	[ -z "$config" ] || {
		include /lib/network
		scan_interfaces
		for config in $config; do
			setup_interface "$iface" "$config" "" "$vifmac"
		done
	}
)}

set_wifi_up() {
	local cfg="$1"
	local ifname="$2"
	uci_set_state wireless "$cfg" up 1
	uci_set_state wireless "$cfg" ifname "$ifname"
}

set_wifi_down() {
	local cfg="$1"
	local vifs vif vifstr

	[ -f "/var/run/wifi-${cfg}.pid" ] &&
		kill "$(cat "/var/run/wifi-${cfg}.pid")" 2>/dev/null
	uci_revert_state wireless "$cfg"
	config_get vifs "$cfg" vifs
	for vif in $vifs; do
		uci_revert_state wireless "$vif"
	done
}

scan_wifi() {
	local cfgfile="$1"
	DEVICES=
	config_cb() {
		local type="$1"
		local section="$2"

		# section start
		case "$type" in
			wifi-device)
				append DEVICES "$section"
				config_set "$section" vifs ""
				config_set "$section" ht_capab ""
			;;
		esac

		# section end
		config_get TYPE "$CONFIG_SECTION" TYPE
		case "$TYPE" in
			wifi-iface)
				config_get device "$CONFIG_SECTION" device
				config_get vifs "$device" vifs 
				append vifs "$CONFIG_SECTION"
				config_set "$device" vifs "$vifs"
			;;
		esac
	}
	config_load "${cfgfile:-wireless}"
}

DEVICES=
DRIVERS=
include /lib/wifi

wifi_bcm_lock="/var/run/wifi_bcm.lock"
trap "lock -u $wifi_bcm_lock; exit 1" SIGHUP SIGINT SIGTERM
lock $wifi_bcm_lock

scan_wifi

exitcode=0
case "$1" in
	down)
		wifi_updown "disable" "$2"
		wifi_service_restart
		echo 1 > /tmp/smart_force_wifi_down
		;;
	detect) wifi_detect "$2";;
	--help|help) usage;;
	*)
		wifi_updown "enable" "$2"
		exitcode=$?

		# just for guest status chech
		echo 0 > /tmp/smart_force_wifi_down
		log ".....recall_wifi=$recall_wifi."
		if [ 1 == $recall_wifi ]; then
			wifi_updown "enable"
        fi
	;;
esac

lock -u $wifi_bcm_lock

exit $exitcode
